#!/usr/bin/env python
PACKAGE = "echtzeitsysteme"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("green_low_H", int_t, 0, "green: lower bound for H", 48, 0, 179)
gen.add("green_low_S", int_t, 0, "green: lower bound for S", 55, 0, 255)
gen.add("green_low_V", int_t, 0, "green: lower bound for V", 173, 0, 255)
gen.add("green_high_H", int_t, 0, "green: higher bound for H", 78, 0, 179)
gen.add("green_high_S", int_t, 0, "green: higher bound for S", 169, 0, 255)
gen.add("green_high_V", int_t, 0, "green: higher bound for V", 255, 0, 255)

gen.add("pink_low_H", int_t, 0, "pink: lower bound for H", 152, 0, 179)
gen.add("pink_low_S", int_t, 0, "pink: lower bound for S", 44, 0, 255)
gen.add("pink_low_V", int_t, 0, "pink: lower bound for V", 98, 0, 255)
gen.add("pink_high_H", int_t, 0, "pink: higher bound for H", 180, 0, 179)
gen.add("pink_high_S", int_t, 0, "pink: higher bound for S", 128, 0, 255)
gen.add("pink_high_V", int_t, 0, "pink: higher bound for V", 255, 0, 255)

gen.add("loop_rate", int_t, 0, "loop rate for image processing", 10, 1, 100)
gen.add("y_dist_cm", double_t, 0, "distance of trajectory point to car in cm", 88, 0, 200)
gen.add("lane_dist_cm", double_t, 0, "distance of trajectory point to right lane in cm", 30, 0, 100)
gen.add("colorThreshold", int_t, 0, "intensity threshold to be recognized as lane", 180, 0, 255)


exit(gen.generate(PACKAGE, "Image Processing", "ImageProcessing"))